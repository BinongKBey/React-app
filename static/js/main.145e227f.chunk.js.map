{"version":3,"sources":["todos.js","addForm.js","App.js","serviceWorker.js","index.js"],"names":["todos","deleteTodo","todoList","length","map","item","className","key","id","onClick","content","addForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","placeholder","Component","App","todoslist","todo","Math","random","newtodo","newList","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0MAsBeA,EAnBD,YAA4B,IAAzBA,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACdC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACvC,0BAAMC,QAAS,WAAKR,EAAWI,EAAKG,MAAOH,EAAKK,aAK5D,uBAAGJ,UAAY,UAAf,aAEJ,OACI,yBAAKA,UAAU,oBACVJ,ICiBES,E,4MA9BXC,MAAQ,CACJF,QAAS,I,EAEbG,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,QAASI,EAAEE,OAAOC,S,EAI1BC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVL,QAAS,M,uDAKb,OACI,6BACI,0BAAMY,SAAUC,KAAKL,cACjB,+CACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,aAAca,YAAY,aAAaT,MAAOM,KAAKX,MAAMF,gB,GAxBzFiB,aC0CPC,E,4MAtCbhB,MAAQ,CACNiB,UAAW,CACT,CAAErB,GAAI,EAAGE,QAAS,iBAClB,CAAEF,GAAI,EAAGE,QAAS,qB,EAKtBW,QAAU,SAACS,GACTA,EAAKtB,GAAKuB,KAAKC,SACf,IAAIC,EAAO,CAAIH,GAAJ,mBAAa,EAAKlB,MAAMiB,YACnC,EAAKd,SAAS,CACZc,UAAWI,K,EAIfhC,WAAa,SAACO,GACZ,IAAI0B,EAAU,EAAKtB,MAAMiB,UAAUM,QAAO,SAAA9B,GACxC,OAAOG,IAAOH,EAAKG,MAErB,EAAKO,SAAS,CACZc,UAAWK,K,uDAKb,OACE,yBAAK5B,UAAU,sBACb,wBAAIA,UAAU,oBAAd,UACA,kBAAC,EAAD,CAASe,QAASE,KAAKF,UACvB,kBAAC,EAAD,CAAOrB,MAAOuB,KAAKX,MAAMiB,UAAW5B,WAAYsB,KAAKtB,kB,GA/B3C0B,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.145e227f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst todos = ({ todos, deleteTodo }) => {\r\n    const todoList = todos.length ? (\r\n        todos.map(item=>{\r\n            return (\r\n                <div className=\"collection-item\" key={item.id}>\r\n                    <span onClick={()=>{deleteTodo(item.id)}}>{item.content}</span>\r\n                </div>\r\n            )\r\n        })\r\n    ): (\r\n        <p className = \"center\">No Todo's</p>\r\n    )\r\n    return (\r\n        <div className=\"todos collection\">\r\n            {todoList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default todos;","import React, { Component } from 'react'\r\n\r\nclass addForm extends Component {\r\n\r\n    state = {\r\n        content: \"\"\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state)\r\n        this.setState({\r\n            content: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>Add New Todo</label>\r\n                    <input type='text' onChange={this.handleChange} placeholder=\"Enter Todo\" value={this.state.content} />\r\n                </form>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default addForm","import React, { Component } from 'react';\r\nimport Todos from './todos'\r\nimport AddForm from './addForm'\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todoslist: [\r\n      { id: 1, content: \"Buy some Milk\" },\r\n      { id: 2, content: \"Play Zelda BOTW\" }\r\n\r\n    ]\r\n  }\r\n\r\n  addTodo = (todo) => {\r\n    todo.id = Math.random();\r\n    let newtodo = [todo, ...this.state.todoslist]\r\n    this.setState({\r\n      todoslist: newtodo\r\n    })\r\n  }\r\n\r\n  deleteTodo = (id) => {\r\n    let newList = this.state.todoslist.filter(item => {\r\n      return id !== item.id\r\n    })\r\n    this.setState({\r\n      todoslist: newList\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todo-app container\">\r\n        <h1 className=\"center blue-text\">Todo's</h1>\r\n        <AddForm addTodo={this.addTodo} />\r\n        <Todos todos={this.state.todoslist} deleteTodo={this.deleteTodo} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}